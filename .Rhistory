?rnorm
rnorm(2)
rnorm(2)
rnorm(2)
class(rnorm(2))
typeof(rnorm(2))
as.integer(rnorm(2))
class(as.integer(rnorm(2)))
typeof(as.integer(rnorm(2)))
library(data.table)
set.seed(101) # Always set the seed before simulating data
NI <- 1000 # Number of individuals
NT <- 5 # Number of time periods
aalpha <- 8
bbeta <- 1
kkappa <- 1
ddata <- data.table(expand.grid(id = 1:NI, time = 1:NT))
ddata[, mu := rnorm(n = 1), by = "id" ]
ddata
ddata=ddata[order(id,time)]
ddata
ddata[,epsilon := rnorm(n=1), by=c('id','time')]
ddata
ddata[, mean(epsilon), by='time']
library(data.table)
set.seed(101) # Always set the seed before simulating data
NI <- 1000 # Number of individuals
NT <- 5 # Number of time periods
aalpha <- 8
bbeta <- 1
kkappa <- 1
ddata <- data.table(expand.grid(id = 1:NI, time = 1:NT))
ddata[, mu := rnorm(n = 1), by = "id" ] # draw one mu for each id.
ddata[, X := -mu - time * .5 + rnorm(n = nrow(ddata))] # draw X on mu,t.
ddata[, epsilon := rnorm(nrow(ddata)) ] # draw one epsilon for each observation.
ddata[, Y := aalpha + bbeta * X + time * kkappa + mu + epsilon] # construct Y.
ddata[c(1:3)]
knitr::opts_chunk$set(echo = FALSE, fig.height = 3)
def.chunk.hook <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size, "\n\n", x, "\n\n \\normalsize"), x)
})
obsdata <- ddata[, .(id, time, Y, X)]
ggp_X <- ggplot(aes(x = X_quantile_bin, y = Y_mean), data = Y_X_stats) +
geom_point(aes(size = count), shape = 1) + # circles that scale with count
geom_line() + # this says to display a line
geom_vline(xintercept = .5, linetype = "dashed") + # vertical line at median
annotate("text", x = .46, y = 10.2, label = "Median") + # annotate median
theme_bw() + # attractive black-and-white color scheme
labs(size = "Obs. Count") + # set legend title
ylab(expression(Mean ~ of ~ Y[it])) + # math label
xlab(expression(Quantile ~ Bin ~ of ~ X[it])) # math label
library(ggplot2)
ggp_X <- ggplot(aes(x = X_quantile_bin, y = Y_mean), data = Y_X_stats) +
geom_point(aes(size = count), shape = 1) + # circles that scale with count
geom_line() + # this says to display a line
geom_vline(xintercept = .5, linetype = "dashed") + # vertical line at median
annotate("text", x = .46, y = 10.2, label = "Median") + # annotate median
theme_bw() + # attractive black-and-white color scheme
labs(size = "Obs. Count") + # set legend title
ylab(expression(Mean ~ of ~ Y[it])) + # math label
xlab(expression(Quantile ~ Bin ~ of ~ X[it])) # math label
obsdata[, X_quantile_bin := round(ecdf(X)(X), 1)]
Y_X_stats <- obsdata[,
list(
Y_mean = mean(Y), # mean
Y_q25 = quantile(Y, .25), # 25th percentile
Y_max = max(Y), # max
count = .N # number of observations used in this statistic
),
by = "X_quantile_bin"
]
Y_X_stats <- Y_X_stats[order(X_quantile_bin)] # putting data in order of X
Y_X_stats[1:3] # print first 3 rows
ggp_X <- ggplot(aes(x = X_quantile_bin, y = Y_mean), data = Y_X_stats) +
geom_point(aes(size = count), shape = 1) + # circles that scale with count
geom_line() + # this says to display a line
geom_vline(xintercept = .5, linetype = "dashed") + # vertical line at median
annotate("text", x = .46, y = 10.2, label = "Median") + # annotate median
theme_bw() + # attractive black-and-white color scheme
labs(size = "Obs. Count") + # set legend title
ylab(expression(Mean ~ of ~ Y[it])) + # math label
xlab(expression(Quantile ~ Bin ~ of ~ X[it])) # math label
ggp_X # print figure
ggp_X
ggp_X <- ggplot(aes(x = X_quantile_bin, y = Y_mean), data = Y_X_stats) +
geom_point(aes(size = count), shape = 1) + # circles that scale with count
geom_line() + # this says to display a line
geom_vline(xintercept = .5, linetype = "dashed") + # vertical line at median
annotate("text", x = .46, y = 10.2, label = "Median") + # annotate median
theme_bw() + # attractive black-and-white color scheme
labs(size = "Obs. Count") + # set legend title
ylab(expression(Mean ~ of ~ Y[it])) + # math label
xlab(expression(Quantile ~ alpha ~ of ~ X[it])) # math label
ggp_X
ggp_X
ggp_X <- ggplot(aes(x = X_quantile_bin, y = Y_mean), data = Y_X_stats) +
geom_point(aes(size = count), shape = 1) + # circles that scale with count
geom_line() + # this says to display a line
geom_vline(xintercept = .5, linetype = "dashed") + # vertical line at median
annotate("text", x = .46, y = 10.2, label = "Median") + # annotate median
theme_bw() + # attractive black-and-white color scheme
labs(size = "Obs. Count") + # set legend title
ylab(expression(Mean ~ of ~ Y[it])) + # math label
xlab(expression(Quantile ~ frac(alpha^2,beta) ~ of ~ X[it])) # math label
ggp_X
ggp_X
as.integer(c(.1,1.1))
as.data.table(c(.1,1.1))
data9=()
data()
